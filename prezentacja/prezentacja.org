# -*- ispell-local-dictionary: "polish"; -*-
#+REVEAL_ROOT: ./reveal.js-3.3.0
#+REVEAL_THEME: white
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: ./highlight/styles/vs.css
#+REVEAL_MARGIN: 0.07
#+OPTIONS: reveal_title_slide:nil num:nil toc:nil reveal_history:t

* Kotlin na backendzie

Łukasz Jędrzejewski

* Plan

- język
- Spring
- testowanie
- Kotlin 1.1

* Kotlin?

#+ATTR_HTML: :width 200px
[[./img/kotlin.svg]]

** Wersja 1.0

Wydana 15 lutego 2016.

** Cechy

- obiektowy
- funkcyjny
- statycznie typowany
- uruchamiany na JVM

* Język
** Wyrażenia

#+ATTR_REVEAL: :frag (t)
- po javowemu
  #+BEGIN_SRC kotlin
    fun newOrNull(value: String?): Msisdn {
        if (value != null) {
            return Msisdn(value)
        } else {
            return null
        }
    }
  #+END_SRC
- z wyrażeniami
  #+BEGIN_SRC kotlin
    fun newOrNull(value: String?): Msisdn {
        return if (value != null) {
            Msisdn(value)
        } else {
            null
        }
    }
  #+END_SRC

** Jawna obsługa null

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  val a: String? = null
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  a.length    // błąd kompilacji
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  val a: String = null    // błąd kompilacji
#+END_SRC

#+ATTR_REVEAL: :frag t
- funkcje także są chronione

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  fun add1(value: Int) = value + 1

  add1(null)    // błąd kompilacji
#+END_SRC

** Elvis

#+REVEAL_HTML: <code style="font-size: 250%">?:</code>

#+ATTR_REVEAL: :frag t
#+ATTR_HTML: :width 250px
[[./img/elvis.jpg]]

#+REVEAL: split

#+BEGIN_SRC kotlin
fun findUser(name: String): User?

val name = "Elvis"
val user: User? = findUser(name)
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
val id: Long = user?.id ?: -1
val id: Long = user?.id ?: throw UserNotFoundException()
val id: Long = user?.id ?: return log.warn("User: $name not found")
#+END_SRC

** Sprytne rzutowanie

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  if (obj is String && obj.length > 0) {
      print(obj.length)
  }
#+END_SRC

** Data klasy

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  data class Developer(val firstName: String,
                       val lastName: String,
                       val login: String)
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC java
  @AllArgsConstructor
  @Getter
  @ToString
  @EqualsAndHashCode
  @Wither
  public final class Developer {
      private final String firstName;
      private final String lastName;
      private final String login;
  }
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC kotlin
  data class Developer(val firstName: String,
                       val lastName: String,
                       val login: String)
#+END_SRC

#+ATTR_REVEAL: :frag (t)
- niemutowalne (gdy nie używamy =var=) - modyfikacja przez =copy=
  #+BEGIN_SRC kotlin
  val ljd = developer.copy(login = "ljd")
  #+END_SRC
- destructuring bind
  #+BEGIN_SRC kotlin
  val (fn, ln) = developer
  #+END_SRC

** Nazwane argumenty

- przy wywołaniu można nazwać argumenty
- dodatkowo nadać domyślne wartości
- wypada konieczność używania builderów

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  data class Developer(
          val firstName: String,
          val lastName: String,
          val login: String = toukizedLogin(firstName, lastName))
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  Developer(firstName = "Łukasz", lastName = "Jędrzejewski")
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  Developer(firstName = "Jakub",
            lastName = "Nowakowski",
            login = "kn")
#+END_SRC

*** A korzystając z biblioteki w Javie mogę tak napisać?

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  import org.springframework.security.core.userdetails.User

  User(username = username,
       password = password,
       enabled = enabled,
       accountNonExpired = true,
       credentialsNonExpired = true,
       accountNonLocked = true,
       authorities = listOf(SimpleGrantedAuthority("ROLE_REGISTERED")))
#+END_SRC

#+ATTR_REVEAL: :frag t
Nie bardzo...

*** Świeży IntelliJ i Java

[[./img/intellij.png]]

** when

- =switch= na sterydach
- ochroni przed nieobsłużoną wartością w =Enum=-ie
- nie wspiera pattern matchingu

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  when (x) {
      0, 1 -> print("x == 0 or x == 1")
      in 3..5 -> print("3 <= x <= 5")
      else -> print("otherwise")
  }
#+END_SRC

** Funkcje rozszerzające

- nie modyfikują klas
- zaimplementowane jako funkcje statyczne

** Funkcje rozszerzające na nullach

#+BEGIN_SRC kotlin
  fun Any?.toString(): String {
      return if (this == null) "null" else toString()
  }
#+END_SRC

** Kolekcje

#+ATTR_REVEAL: :frag (t)
- niemutowalne (dostępne warianty mutowalne)
- ale...
  #+BEGIN_SRC kotlin
    public operator
    fun <T> Collection<T>.plus(element: T): List<T> {
        val result = ArrayList<T>(size + 1)
        result.addAll(this)
        result.add(element)
        return result
    }
  #+END_SRC
- kompatybilne z interfejsami kolekcji z Javy

** Scope

#+ATTR_REVEAL: :frag t
| Java      | Kotlin    |
|-----------+-----------|
| =private=   | =private=   |
| =protected= | =protected= |
| =package=   | -         |
| =public=    | =public=    |

#+ATTR_REVEAL: :frag t
Nowy scope - *internal*

** Etykiety

- wyskakiwanie z lambd
  #+BEGIN_SRC kotlin
    list.map { value ->
        repeat(10) {
            val result = tryToDoSth(value)
            if (result != null) {
                return@map result
            }
        }
        null
    }
  #+END_SRC
- odwołania do zewnętrznych =this=

** Standard.kt

a w nim funkcje =let=, =apply=, =with=, =run= - głównie do pracy z nullami i setterami

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  @Bean
  open fun accessTokenConverter(): JwtAccessTokenConverter {
      return JwtAccessTokenConverter().apply {
          setSigningKey("123")
      }
  }
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
  userRepository.findByEmail(email)?.let {
      doSthWithUser(it)
  }
#+END_SRC

** Preconditions.kt

#+BEGIN_SRC kotlin
fun require(value: Boolean): Unit
fun require(value: Boolean, lazyMessage: () -> Any): Unit

fun <T:Any> requireNotNull(value: T?): T
fun <T:Any> requireNotNull(value: T?, lazyMessage: () -> Any): T

fun check(value: Boolean): Unit
fun check(value: Boolean, lazyMessage: () -> Any): Unit

fun <T:Any> checkNotNull(value: T?): T
fun <T:Any> checkNotNull(value: T?, lazyMessage: () -> Any): T

fun error(message: Any): Nothing
#+END_SRC

** Generyki

- reklamowane jako prostsze
- zamiast =? extends= i =? super= - =out= i =in=
- ma odpowiadać producentowi i konsumentowi
- oczywiście naprawione tablice z Javy

*** Reified type parameters

#+ATTR_REVEAL: :frag t
pozwala na odwołanie się do klasy generycznego typu

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
verify(aMock).aMethod(any(AParam::class.java))
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
verify(aMock).aMethod(any())
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
inline fun <reified T : Any> any() = Mockito.any(T::class.java)
#+END_SRC

** Adnotacje

#+ATTR_REVEAL: :frag (t)
- dziwna składnia adnotacji
  #+BEGIN_SRC kotlin
  @RequestMapping(method = arrayOf(RequestMethod.GET))
  #+END_SRC
- a zagnieżdżonych jeszcze bardziej
  #+BEGIN_SRC kotlin
    @ApiResponses(ApiResponse(code = 400, message = "Bad request"),
                  ApiResponse(code = 409, message = "Conflict"))
  #+END_SRC
- adnotacje na property - należy określić czy adnotacja ma dotyczyć pola,
  gettera, bądź settera
  #+BEGIN_SRC kotlin
    class Token(@get:JsonIgnore val value: String)
  #+END_SRC

** Oraz

- mapy, flatmapy, itd.
- singletony
- sealed classes
- lateinit
- inline
- infix
- przeciążanie operatorów
- delegacja
- delegacja "pól" - wbudowane =lazy=, =observable=

* Współpraca z Javą

- brak rozróżnienia na typy mogące być =null=-em*
- operacje wyłącznie na kolekcjach kotlinowych
- gettery i settery traktowane jako property
- dopasowywanie lambd do interfejsów funkcyjnych

* Spring
** final

#+REVEAL_HTML: <p class="fragment">Domyślnie klasy i metody posiadają modyfikatory <code>public</code> i <span style="color: red"><code>final</code></span>

#+ATTR_REVEAL: :frag t
Właściwie dopóki Spring nie potrzebuje proxy (np. przez użycie =@Transactional=),
nie ma problemu. Wtedy musimy otworzyć klasę i metody poprzez =open=

*** A czy muszę o tym pamiętać?

#+ATTR_REVEAL: :frag t
Do kotlina 1.0.5 owszem

#+ATTR_REVEAL: :frag t
Od wersji 1.0.6 twórcy złamali swoje założenie i wydali plugin =kotlin-allopen=

#+ATTR_REVEAL: :frag t
- otwiera wszystko oznaczone wybranymi adnotacjami
- dostępna także konfiguracja z adnotacjami springowymi (=kotlin-spring=)
- a nawet kolejny plugin =no-arg=, która dodaje bezargumentowy konstruktor

** Spring 4.3

#+ATTR_REVEAL: :frag t
Trochę upraszcza

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
@Service
class MyService(private val otherService: OtherService) {
    ...
}
#+END_SRC

#+ATTR_REVEAL: :frag t
zamiast
#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
@Service
class MyService @Autowired constructor(
        private val otherService: OtherService
) {
    ...
}
#+END_SRC

** Configuration properties

#+ATTR_REVEAL: :frag t
W kotlinie wygląda brzydko

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
@Configuration
@ConfigurationProperties("spring.social.google")
open class GoogleConfiguration {
    var validity: Duration = Duration.ofDays(3)
    var clientIds: MutableList<String> = mutableListOf()
}
#+END_SRC

** Jackson

#+ATTR_REVEAL: :frag t
Nie obędzie się bez dodatkowego modułu - =jackson-module-kotlin=

#+ATTR_REVEAL: :frag t
Radzi sobie klasami bez domyślnego konstruktora

** Spring 5.0

#+ATTR_REVEAL: :frag (t)
- Spring będzie rozumiał, czy typ może być nullem
  - =@Autowired=
  - =@RequestParam= i =@HeaderParam=
- =RestTemplate= wykorzysta reified...
  #+BEGIN_SRC java
  restTemplate.exchange(... new ParameterizedTypeReference<List<Foo>>() { })
  #+END_SRC
  #+BEGIN_SRC kotlin
  val result: List<Foo> = restTemplate.getForObject(url)
  #+END_SRC

* Testowanie

** Czego używamy?

#+ATTR_REVEAL: :frag t
- Junit 4.12
- AssertJ 3.x
- mockito-kotlin

#+ATTR_REVEAL: :frag t
Struktura testów nie różni się znacząco od tych z Javy. Miłym dodatkiem jest
jednak nazewnictwo

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
@Test
fun `should add numbers`() {
    assertThat(1 + 1).isEqualTo(2)
}
#+END_SRC

** final

Problem analogiczny jak przy Springu - trzeba otworzyć klasę, użyć pluginu
=kotlin-allopen=, bądź ...

#+ATTR_REVEAL: :frag t
... otworzyć klasę tylko w teście

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC kotlin
import de.jodamob.kotlin.testrunner.KotlinTestRunner

@RunWith(KotlinTestRunner::class)
class ATest {
}
#+END_SRC

** mockito

Czyste sprawia problemy:
- =when= jest słowem kluczowym
  #+BEGIN_SRC kotlin
  `when`(dev.firstName).thenReturn("name")
  #+END_SRC
- matchery zwracają =null=

#+ATTR_REVEAL: :frag t
Z pomocą przychodzi nakładka *mockito-kotlin*

* W praktyce
** Null safety
** Fluent buildery
* Kotlin 1.1

- będzie można *dziedziczyć* z data klas, uff
- =myService::aMethod=, (aktualnie wspierane jest jedynie odniesienie do funkcji,
  np. =String::length=)
- async/await
- aliasy
- wsparcie dla Javy *8* (streamy, domyślne metody z interfejsów)

* Podsumowanie

#+ATTR_REVEAL: :frag t
Jak oceniam Kotlina?

#+ATTR_REVEAL: :frag t
#+REVEAL_HTML: <p class="fragment"><span style="color:blue">Przyjemniejsza</span> Java, prostsza Scala</p>

* Źródła

- http://kotlinlang.org/docs/reference/
- https://blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here/
- https://blog.jetbrains.com/kotlin/2016/07/first-glimpse-of-kotlin-1-1-coroutines-type-aliases-and-more/
- https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin
- https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0


* Dziękuję!
